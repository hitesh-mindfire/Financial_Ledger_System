/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.3
// source: proto/notification.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"
import * as proto_notification_pb from './notification_pb'; // proto import: "proto/notification.proto"


export class NotificationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSendNotification = new grpcWeb.MethodDescriptor(
    '/proto.NotificationService/SendNotification',
    grpcWeb.MethodType.UNARY,
    proto_notification_pb.NotificationRequest,
    google_protobuf_empty_pb.Empty,
    (request: proto_notification_pb.NotificationRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  sendNotification(
    request: proto_notification_pb.NotificationRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  sendNotification(
    request: proto_notification_pb.NotificationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  sendNotification(
    request: proto_notification_pb.NotificationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.NotificationService/SendNotification',
        request,
        metadata || {},
        this.methodDescriptorSendNotification,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.NotificationService/SendNotification',
    request,
    metadata || {},
    this.methodDescriptorSendNotification);
  }

  methodDescriptorGetUserNotifications = new grpcWeb.MethodDescriptor(
    '/proto.NotificationService/GetUserNotifications',
    grpcWeb.MethodType.UNARY,
    proto_notification_pb.GetUserNotificationsRequest,
    proto_notification_pb.NotificationList,
    (request: proto_notification_pb.GetUserNotificationsRequest) => {
      return request.serializeBinary();
    },
    proto_notification_pb.NotificationList.deserializeBinary
  );

  getUserNotifications(
    request: proto_notification_pb.GetUserNotificationsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_notification_pb.NotificationList>;

  getUserNotifications(
    request: proto_notification_pb.GetUserNotificationsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_notification_pb.NotificationList) => void): grpcWeb.ClientReadableStream<proto_notification_pb.NotificationList>;

  getUserNotifications(
    request: proto_notification_pb.GetUserNotificationsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_notification_pb.NotificationList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.NotificationService/GetUserNotifications',
        request,
        metadata || {},
        this.methodDescriptorGetUserNotifications,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.NotificationService/GetUserNotifications',
    request,
    metadata || {},
    this.methodDescriptorGetUserNotifications);
  }

  methodDescriptorMarkAsRead = new grpcWeb.MethodDescriptor(
    '/proto.NotificationService/MarkAsRead',
    grpcWeb.MethodType.UNARY,
    proto_notification_pb.MarkAsReadRequest,
    google_protobuf_empty_pb.Empty,
    (request: proto_notification_pb.MarkAsReadRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  markAsRead(
    request: proto_notification_pb.MarkAsReadRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  markAsRead(
    request: proto_notification_pb.MarkAsReadRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  markAsRead(
    request: proto_notification_pb.MarkAsReadRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.NotificationService/MarkAsRead',
        request,
        metadata || {},
        this.methodDescriptorMarkAsRead,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.NotificationService/MarkAsRead',
    request,
    metadata || {},
    this.methodDescriptorMarkAsRead);
  }

  methodDescriptorSubscribeToUserEvents = new grpcWeb.MethodDescriptor(
    '/proto.NotificationService/SubscribeToUserEvents',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_notification_pb.SubscribeToUserEventsRequest,
    proto_notification_pb.WebSocketMessage,
    (request: proto_notification_pb.SubscribeToUserEventsRequest) => {
      return request.serializeBinary();
    },
    proto_notification_pb.WebSocketMessage.deserializeBinary
  );

  subscribeToUserEvents(
    request: proto_notification_pb.SubscribeToUserEventsRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_notification_pb.WebSocketMessage> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/proto.NotificationService/SubscribeToUserEvents',
      request,
      metadata || {},
      this.methodDescriptorSubscribeToUserEvents);
  }

}

