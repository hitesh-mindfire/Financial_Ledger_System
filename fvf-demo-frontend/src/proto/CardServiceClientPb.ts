/**
 * @fileoverview gRPC-Web generated client stub for proto
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.3
// source: proto/card.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_card_pb from './card_pb'; // proto import: "proto/card.proto"


export class CardServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorIssueCard = new grpcWeb.MethodDescriptor(
    '/proto.CardService/IssueCard',
    grpcWeb.MethodType.UNARY,
    proto_card_pb.IssueCardRequest,
    proto_card_pb.Card,
    (request: proto_card_pb.IssueCardRequest) => {
      return request.serializeBinary();
    },
    proto_card_pb.Card.deserializeBinary
  );

  issueCard(
    request: proto_card_pb.IssueCardRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_card_pb.Card>;

  issueCard(
    request: proto_card_pb.IssueCardRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_card_pb.Card) => void): grpcWeb.ClientReadableStream<proto_card_pb.Card>;

  issueCard(
    request: proto_card_pb.IssueCardRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_card_pb.Card) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.CardService/IssueCard',
        request,
        metadata || {},
        this.methodDescriptorIssueCard,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.CardService/IssueCard',
    request,
    metadata || {},
    this.methodDescriptorIssueCard);
  }

  methodDescriptorAuthorizeTransaction = new grpcWeb.MethodDescriptor(
    '/proto.CardService/AuthorizeTransaction',
    grpcWeb.MethodType.UNARY,
    proto_card_pb.AuthRequest,
    proto_card_pb.AuthResponse,
    (request: proto_card_pb.AuthRequest) => {
      return request.serializeBinary();
    },
    proto_card_pb.AuthResponse.deserializeBinary
  );

  authorizeTransaction(
    request: proto_card_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_card_pb.AuthResponse>;

  authorizeTransaction(
    request: proto_card_pb.AuthRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_card_pb.AuthResponse) => void): grpcWeb.ClientReadableStream<proto_card_pb.AuthResponse>;

  authorizeTransaction(
    request: proto_card_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_card_pb.AuthResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.CardService/AuthorizeTransaction',
        request,
        metadata || {},
        this.methodDescriptorAuthorizeTransaction,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.CardService/AuthorizeTransaction',
    request,
    metadata || {},
    this.methodDescriptorAuthorizeTransaction);
  }

  methodDescriptorUpdateLimit = new grpcWeb.MethodDescriptor(
    '/proto.CardService/UpdateLimit',
    grpcWeb.MethodType.UNARY,
    proto_card_pb.UpdateLimitRequest,
    proto_card_pb.Card,
    (request: proto_card_pb.UpdateLimitRequest) => {
      return request.serializeBinary();
    },
    proto_card_pb.Card.deserializeBinary
  );

  updateLimit(
    request: proto_card_pb.UpdateLimitRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_card_pb.Card>;

  updateLimit(
    request: proto_card_pb.UpdateLimitRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_card_pb.Card) => void): grpcWeb.ClientReadableStream<proto_card_pb.Card>;

  updateLimit(
    request: proto_card_pb.UpdateLimitRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_card_pb.Card) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.CardService/UpdateLimit',
        request,
        metadata || {},
        this.methodDescriptorUpdateLimit,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.CardService/UpdateLimit',
    request,
    metadata || {},
    this.methodDescriptorUpdateLimit);
  }

  methodDescriptorGetBalance = new grpcWeb.MethodDescriptor(
    '/proto.CardService/GetBalance',
    grpcWeb.MethodType.UNARY,
    proto_card_pb.GetBalanceRequest,
    proto_card_pb.Balance,
    (request: proto_card_pb.GetBalanceRequest) => {
      return request.serializeBinary();
    },
    proto_card_pb.Balance.deserializeBinary
  );

  getBalance(
    request: proto_card_pb.GetBalanceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_card_pb.Balance>;

  getBalance(
    request: proto_card_pb.GetBalanceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_card_pb.Balance) => void): grpcWeb.ClientReadableStream<proto_card_pb.Balance>;

  getBalance(
    request: proto_card_pb.GetBalanceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_card_pb.Balance) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.CardService/GetBalance',
        request,
        metadata || {},
        this.methodDescriptorGetBalance,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.CardService/GetBalance',
    request,
    metadata || {},
    this.methodDescriptorGetBalance);
  }

}

