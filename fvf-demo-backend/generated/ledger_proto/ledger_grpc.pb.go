// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/ledger.proto

package ledger_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LedgerService_CreateLedgerEntry_FullMethodName = "/ledgerpb.LedgerService/CreateLedgerEntry"
	LedgerService_UpdateStatus_FullMethodName      = "/ledgerpb.LedgerService/UpdateStatus"
	LedgerService_GetLedgerEntry_FullMethodName    = "/ledgerpb.LedgerService/GetLedgerEntry"
	LedgerService_ListLedgerEntries_FullMethodName = "/ledgerpb.LedgerService/ListLedgerEntries"
)

// LedgerServiceClient is the client API for LedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service Definition
type LedgerServiceClient interface {
	CreateLedgerEntry(ctx context.Context, in *CreateLedgerEntryRequest, opts ...grpc.CallOption) (*LedgerEntry, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*LedgerEntry, error)
	GetLedgerEntry(ctx context.Context, in *GetLedgerRequest, opts ...grpc.CallOption) (*LedgerEntry, error)
	ListLedgerEntries(ctx context.Context, in *LedgerFilter, opts ...grpc.CallOption) (*LedgerList, error)
}

type ledgerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerServiceClient(cc grpc.ClientConnInterface) LedgerServiceClient {
	return &ledgerServiceClient{cc}
}

func (c *ledgerServiceClient) CreateLedgerEntry(ctx context.Context, in *CreateLedgerEntryRequest, opts ...grpc.CallOption) (*LedgerEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerEntry)
	err := c.cc.Invoke(ctx, LedgerService_CreateLedgerEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*LedgerEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerEntry)
	err := c.cc.Invoke(ctx, LedgerService_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) GetLedgerEntry(ctx context.Context, in *GetLedgerRequest, opts ...grpc.CallOption) (*LedgerEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerEntry)
	err := c.cc.Invoke(ctx, LedgerService_GetLedgerEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) ListLedgerEntries(ctx context.Context, in *LedgerFilter, opts ...grpc.CallOption) (*LedgerList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerList)
	err := c.cc.Invoke(ctx, LedgerService_ListLedgerEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerServiceServer is the server API for LedgerService service.
// All implementations must embed UnimplementedLedgerServiceServer
// for forward compatibility.
//
// Service Definition
type LedgerServiceServer interface {
	CreateLedgerEntry(context.Context, *CreateLedgerEntryRequest) (*LedgerEntry, error)
	UpdateStatus(context.Context, *UpdateStatusRequest) (*LedgerEntry, error)
	GetLedgerEntry(context.Context, *GetLedgerRequest) (*LedgerEntry, error)
	ListLedgerEntries(context.Context, *LedgerFilter) (*LedgerList, error)
	mustEmbedUnimplementedLedgerServiceServer()
}

// UnimplementedLedgerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLedgerServiceServer struct{}

func (UnimplementedLedgerServiceServer) CreateLedgerEntry(context.Context, *CreateLedgerEntryRequest) (*LedgerEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLedgerEntry not implemented")
}
func (UnimplementedLedgerServiceServer) UpdateStatus(context.Context, *UpdateStatusRequest) (*LedgerEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedLedgerServiceServer) GetLedgerEntry(context.Context, *GetLedgerRequest) (*LedgerEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerEntry not implemented")
}
func (UnimplementedLedgerServiceServer) ListLedgerEntries(context.Context, *LedgerFilter) (*LedgerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLedgerEntries not implemented")
}
func (UnimplementedLedgerServiceServer) mustEmbedUnimplementedLedgerServiceServer() {}
func (UnimplementedLedgerServiceServer) testEmbeddedByValue()                       {}

// UnsafeLedgerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerServiceServer will
// result in compilation errors.
type UnsafeLedgerServiceServer interface {
	mustEmbedUnimplementedLedgerServiceServer()
}

func RegisterLedgerServiceServer(s grpc.ServiceRegistrar, srv LedgerServiceServer) {
	// If the following call pancis, it indicates UnimplementedLedgerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LedgerService_ServiceDesc, srv)
}

func _LedgerService_CreateLedgerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLedgerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).CreateLedgerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_CreateLedgerEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).CreateLedgerEntry(ctx, req.(*CreateLedgerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_GetLedgerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).GetLedgerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_GetLedgerEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).GetLedgerEntry(ctx, req.(*GetLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_ListLedgerEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedgerFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).ListLedgerEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_ListLedgerEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).ListLedgerEntries(ctx, req.(*LedgerFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// LedgerService_ServiceDesc is the grpc.ServiceDesc for LedgerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LedgerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledgerpb.LedgerService",
	HandlerType: (*LedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLedgerEntry",
			Handler:    _LedgerService_CreateLedgerEntry_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _LedgerService_UpdateStatus_Handler,
		},
		{
			MethodName: "GetLedgerEntry",
			Handler:    _LedgerService_GetLedgerEntry_Handler,
		},
		{
			MethodName: "ListLedgerEntries",
			Handler:    _LedgerService_ListLedgerEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ledger.proto",
}
